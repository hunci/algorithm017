public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int preLen = preorder.length;
        int inLen = inorder.length;
        if(preLen != inLen){
            return null;
        }
        return buildTreeHelper(preorder, 0, preLen - 1, inorder, 0, inLen - 1);
    }

    private TreeNode buildTreeHelper(int[] preorder, int preLeft, int preRight, int[] inorder, int inLeft, int inRight) {

        if(preLeft > preRight || inLeft > inRight) {
            return null;
        }
        int pivot = preorder[preLeft];
        TreeNode root = new TreeNode(pivot);
        int pivotIndex = inLeft;
        while(inorder[pivotIndex] != pivot) {
            pivotIndex++;
        }
        root.left = buildTreeHelper(preorder, preLeft+1, pivotIndex - inLeft + preLeft,
                inorder, inLeft, pivotIndex - 1);
        root.right = buildTreeHelper(preorder, preRight - inRight + pivotIndex + 1, preRight,
                inorder, pivotIndex + 1, inRight);
        return root;
    }
}
