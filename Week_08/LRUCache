public class LRUCache{
    class DLinkedNode{
        int key;
        int value;
        DLinkedNode prev;
        DLinkedNode next;
        public DLinkedNode(){

        }
        public DLinkedNode(int _key, int _value){
            key = _key;
            value = _value;
        }

    }
    private int capacity;
    private int size;
    private Map<Integer, DLinkedNode> cache = new HashMap<Integer, DLinkedNode>();
    private DLinkedNode tail, head;
    public LRUCache(int capacity){
        this.size = 0;
        this.capacity = capacity;
        tail = new DLinkedNode();
        head = new DLinkedNode();
        head.next = tail;
        tail.prev = head;

    }

    public int get(int key) {
        DLinkedNode node = cache.get(key);
        if(node == null){
            return -1;
        }
        //move to head;
        moveToHead(node);
        return node.value;

    }

    public void put(int key, int value) {
        DLinkedNode node = cache.get(key);
        if(node == null){
            DLinkedNode newNode = new DLinkedNode(key, value);
            cache.put(key, newNode);
            //add to head
            addToHead(newNode);
            ++size;
            if(size > capacity){
                //remove tail
                DLinkedNode tail = removeTail();
                cache.remove(tail.key);
                --size;
            }
        } else {
            node.value = value;
            //move to head
            moveToHead(node);
        }
    }

    private void removeNode(DLinkedNode node){
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }

    private void addToHead(DLinkedNode node){
        node.prev = head;
        node.next = head.next;
        head.next.prev = node;
        head.next = node;

    }

    private void moveToHead(DLinkedNode node){
        removeNode(node);
        addToHead(node);

    }

    private DLinkedNode removeTail(){
        DLinkedNode res = tail.prev;
        removeNode(res);
        return res;
    }
}