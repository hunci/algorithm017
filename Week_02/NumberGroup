public class NumberGroup {
    public int[] solution(int[] numbers, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int n : numbers){
            if(map.containsKey(n)){
                map.put(n, map.get(n)+1);
            } else {
                map.put(n, 1);
            }
        }
        PriorityQueue<Integer> queue = new PriorityQueue<Integer>(new Comparator<Integer>() {
            @Overoride
            public int compare(Integer a, Integer b){
                return map.get(a) - Integer(b);
            }
        });

        for(Integer key : map.keySet()){
            if(queue.size < k){
                queue.add(key)
            } else if(map.get(key) > map.get(queue.peek())) {
                queue.remove();
                queue.add(key);
            }
        }
        int [] res = new int[k];
        int i = 0;
        while (i < k && !queue.isEmpty()){
            res[i++] = queue.remove();
        }
        return res;

    }
}